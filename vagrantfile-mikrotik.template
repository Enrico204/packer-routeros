def quoted_string_to_mac_address(str)
  # "0800278917AB" ==> 08:00:27:89:17:AB
  return (str[1..2] + ":" + str[3..4] + ":" + str[5..6] +
    ":" + str[7..8] + ":" + str[9..10] + ":" + str[11..12])
end

def init_mac_address_list(machine)
  vm_nic_count = 0
  vm_NIC_mac_addresses = []

  vm_info = Hash.new
  machine.provider.driver.execute("showvminfo", machine.id, "--machinereadable").split("\n").each do |info_line|
    info_name, info_value = info_line.split("=", 2)
    vm_info[info_name] = info_value

    # showvminfo returns "none" for non-present network adapters
    # So we are dealing with values like these:
    # nic1="nat" nic2="hostonly" nic3="none" etc.
    if info_name.start_with?("nic") then
      if info_name.delete("nic").to_i != 0 and info_value != "\"none\"" then
        vm_nic_count += 1
      end
    end
  end

  # MAC addresses have format: macaddress1="0800278917AB" etc.
  # Convert them to "08:00:27:89:17:AB" format
  for i in 1..vm_nic_count
    vm_NIC_mac_addresses += [quoted_string_to_mac_address(vm_info["macaddress#{i}"])]
  end

  return vm_NIC_mac_addresses
end

module VagrantPlugins
  module GuestRouterOS
    class Guest < Vagrant.plugin("2", :guest)
      def detect?(machine)
        # Strictly speaking, detect? should never be called since we
        # set config.vm.guest to 'routeros' explicitly
        machine.config.vm.guest == "cheretbe/routeros"
      end
    end

    module Cap
      class Halt
        def self.halt(machine)
          begin
            machine.ui.detail("Executing '/system shutdown' command")
            # system ("vagrant ssh #{machine.name} -- ':execute \{ :delay 10; /system shutdown \}'")
            system ("vagrant ssh #{machine.name} -- '/system shutdown'")
          rescue IOError => e
            # TODO: Consider using @logger.warn(e)
            machine.ui.warn(e)
            # Ignore, this probably means connection closed because it
            # shut down.
          end
        end
      end
    end

    class Plugin < Vagrant.plugin("2")
      name "RouterOS"
      description "Mikroitik RouterOS support"

      guest("routeros") do
        Guest
      end

      guest_capability("routeros", "halt") do
        Cap::Halt
      end
    end
  end

  module RouterOSProvision
    class Plugin < Vagrant.plugin('2')
      name "router_os_mac_addr_setup"

      class MacAddrSetup
        def initialize(app, env)
          @app = app
        end

        def call(env)
          @app.call(env)
          machine = env[:machine]
          if env[:provision_enabled] then
            vm_NIC_mac_addresses = init_mac_address_list(machine)
            # [!] vm_NIC_mac_addresses array is 0-based
            system "vagrant ssh #{machine.name} -- ':global vmNICMACs [:toarray \"" +
              vm_NIC_mac_addresses.join(", ") + "\"]'"
            vm_nic_count = vm_NIC_mac_addresses.length
            system "vagrant ssh #{machine.name} -- ':global vmNICCount #{vm_nic_count}'"
          end
        end
      end

      action_hook "router_os_mac_addr_setup" do |hook|
        hook.before Vagrant::Action::Builtin::Provision, MacAddrSetup
      end
    end
  end

end

Vagrant.configure(2) do |config|
  config.vm.guest = "routeros"
  config.ssh.username = "vagrant"
  config.ssh.shell  = "\#"
  config.ssh.keys_only = true
  config.ssh.insert_key = false
  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.network "private_network", type: "dhcp", auto_config: false
  config.vm.provider "virtualbox" do |vb|
    vb.check_guest_additions = false
  end

  config.trigger.after :up, :provision, :reload, :resume do |trigger|
    trigger.ruby do |env,machine|
      trigger.name = "Init MAC address list"
      system "vagrant ssh #{machine.name} -- /system script run provision"
    end
  end
end